---
import Hero from "../../../components/case/Hero.astro";
import Layout from "../../../layouts/Layout.astro";
import Product from "../../../components/case/Product.astro";
import Tech from "../../../components/case/Tech.astro";
import { fetchWorks, fetchWorkBySlug } from "../../../utils/api";

export async function getStaticPaths() {
    const works = await fetchWorks();
    return works.map((work) => ({
        params: { slug: work.slug },
        props: { work }
    }));
}

const { slug } = Astro.params;
const { work } = Astro.props;

// Fallback: fetch work if not provided via props
const workData = work || await fetchWorkBySlug(slug);

if (!workData) {
    return Astro.redirect('/404');
}
---

<Layout theme="light" orangeFooter={true}><Hero /><Product /><Tech /> </Layout>

<script is:inline client:load>
    const observer = new IntersectionObserver(
        (entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    entry.target.classList.add("visible");
                }
            });
        },
        { threshold: 0.1 },
    );

    // Observe all animated elements
    document
        .querySelectorAll(".fade-in-up")
        .forEach((el) => observer.observe(el));
</script>

<style is:global>
    .typo-landing h1,
    .typo-landing h2,
    .typo-landing h3,
    .typo-landing h4,
    .typo-landing h5,
    .typo-landing h6 {
        font-family: "Host-Grotesk", sans-serif;
    }

    /* Initial hidden state */
    .fade-in-up {
        opacity: 0;
        transform: translateY(30px);
    }

    /* Animation when visible */
    .fade-in-up.visible {
        animation: fadeInUp 0.75s ease-out forwards;
    }

    @keyframes fadeInUp {
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>
